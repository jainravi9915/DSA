Problem Link -> https://leetcode.com/problems/check-if-there-is-a-valid-partition-for-the-array/description/

// use recusiron where option is there 
bool valid(int x,int y, int z){
        return x==y-1 and y==z-1;
    }
    int solve(int index,vector<int>&nums,vector<int>&dp){
        if(index>=nums.size())return true;
        bool res=false;
        if(dp[index]!=-1)return dp[index];

        if(index+1<nums.size() and nums[index]==nums[index+1]){
            res= solve(index+2,nums,dp);
            if(index+2<nums.size() and nums[index]==nums[index+1] && nums[index]==nums[index+2])
                res= res ||  solve(index+3,nums,dp);
        }
        if(index+2<nums.size() and valid(nums[index],nums[index+1],nums[index+2])){
            res=res ||  solve(index+3,nums,dp);
        }
        return dp[index]=res;
    }
    bool validPartition(vector<int>& nums) {
        int n=nums.size();
        vector<int>dp(n,-1);
        return solve(0,nums,dp);
    }

    // Time Complexity -> O(N)
    // Space Complexity ->O(N)
    //  Explanation check all three posibilites possibilites  part-1,part-2,part-3  
    // Part 1 - nums[i]==nums[i+1], part 2 - nums[i]==nums[i+1]==nums[i+1] , part 3- nums[i+1]-nums[i]==1 and nums[i+2]-nums[i+1]==1
    //1. Start
    //2. Initalize dp array to store result 
    //3. call solve with index,array - return solve(index,nums)
    //4. check if index >=n return true
    //5. intialize res to false
    //6. check for parititon 1 
    //7.    if partiiton 1 eixist check for partition 2 
    //8. check for partition 3 
    //9. if any return true return true else reutrn false
    //10. End