Problem Link -> https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/


class Solution {
public:
    void solve(vector<string>&res, string s,int index,string curr,unordered_map<int,string>&mp){
        if(index==s.size()){
            res.push_back(curr);
            return ;
        }
        string letters=mp[s[index]-'0'];
        for(char c:letters){
            solve(res,s,index+1,curr+c,mp);
        }    

    }
    vector<string> letterCombinations(string digits) {
       unordered_map<int,string>map;
       vector<string>res;
        map[2]="abc";
        map[3]="def";
        map[4]="ghi";
        map[5]="jkl";
        map[6]="mno";
        map[7]="pqrs";
        map[8]="tuv";
        map[9]="wxyz";
        string curr="";
        if(digits.size()==0)return {};
        solve(res,digits,0,curr,map);
        return res;
    }
  
    
};
  // TIme Complexity -> O(4^n) worst can have 4 chars 
    // Space  Complexity -> O(n) worst can have 4 chars 

    //Explanation - backtracking 
    
    //1. start
    //2.  start from index=0 and to last index 
    //3. adding char to curr then call solve() again with index+1
    //4 store to result it string is over
    //5. Exit