Problem Link -> https://leetcode.com/problems/search-in-rotated-sorted-array/

// Using Binary Search 

int search(vector<int>& arr, int target) {
        int n=arr.size();
        int low=0,high=n-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(arr[mid]==target)return mid;
            // check in sorted part
            // left half sorted
            if(arr[low]<=arr[mid]){
                if(arr[low]<=target and target<=arr[mid]){
                    high=mid-1;
                }else{
                    low=mid+1;
                }
            }
            // right half sorted 
            else{
                if(arr[mid]<=target and target<=arr[high]){
                    low=mid+1;
                }else{
                    high=mid-1;
                }
            }
        }
        return -1;
    }
    // Time Complexity -> O(logN)
    // Space Complexity -> O(1)