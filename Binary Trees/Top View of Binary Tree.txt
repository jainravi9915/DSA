Problem Link -> https://practice.geeksforgeeks.org/problems/top-view-of-binary-tree/1

   //Function to return a list of nodes visible from the top view 
   //from left to right in Binary Tree.
    vector<int> topView(Node *root)
    {
        map<int,int>mp;
        if(root==NULL)return {};
        //left -1  right +1
        queue<pair<Node*,int>>q;
        q.push({root,0});
        vector<int>res;
        while(!q.empty()){
            int n=q.size();
            while(n--){
                Node* temp=q.front().first;
                int mark=q.front().second;
                q.pop();
                if(mp.find(mark)==mp.end()){
                    mp[mark]=temp->data;
                }
                if(temp->left)q.push({temp->left,mark-1});
                if(temp->right)q.push({temp->right,mark+1});
            }
        }
        for(auto p:mp){
            res.push_back(p.second);
        }
        return res;
    }
    // Time Complexity  -> O(N*logN)
    // Space Complexity -> O(N)