Problem Link -> https://practice.geeksforgeeks.org/problems/number-of-occurrence2259/1

/* if x is present in arr[] then returns the count
		of occurrences of x, otherwise returns 0. */
    int firstIndex(int arr[], int n,int low,int high,int x ){
        int first=-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(arr[mid]<x){
                low=mid+1;
            }else{
                if(arr[mid]==x){
                    first=mid;
                }
                high=mid-1;
            }
        }
        return first;
    }
    int lastIndex(int arr[], int n,int low,int high,int x){
        int last=-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(arr[mid]>x){
                high=mid-1;
            }else{
                if(arr[mid]==x){
                    last=mid;
                }
                low=mid+1;
            }
        }
        return last;
    }
    int count(int arr[], int n, int x) {
        int start=-1,end=-1;
        int first=firstIndex(arr,n,0,n-1,x);
        if(first==-1)return 0;
         int last=lastIndex(arr,n,0,n-1,x);
        return last-first+1;
    }
    // TIme Complexity -> O(logN)
    // Space Complexity -> O(1)
    // // Explanation binary serach to find first and last index  and return last-first+1