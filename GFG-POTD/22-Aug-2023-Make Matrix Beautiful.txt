Problem Link -> https://practice.geeksforgeeks.org/problems/make-matrix-beautiful-1587115620/1
    //Function to find minimum number of operations that are required 
    //to make the matrix beautiful.
    int findMinOpeartion(vector<vector<int> > matrix, int n)
    {
        int row_max=0,col_max=0;
        for(int i=0; i<n; i++){
            int row=0,col=0;
            for(int j=0; j<n; j++){
                row+=matrix[i][j];
                col+=matrix[j][i];
            }
            row_max=max(row_max,row);
            col_max=max(col,col_max);
        }
        int value=max(row_max,col_max),res=0;
        for(int i=0; i<n; i++){
            int row=0,col=0;
            for(int j=0; j<n; j++){
                row+=matrix[i][j];
                col+=matrix[j][i];
            }
            res+= (value-row )+ (value-col);
        }
        int result= res/2;
        return res;
    } 
    /*
        Time Complexity -> O(N*N)
        Space Complexity ->  O(1)
        1. Start
        2. Itearate over matrix and get maximum sum of row , col
        3. Store that maximum in val
        4. Iterate over matrix and caluclate res= val-row+ val-col; row,col as sum of row and col
        5. result will be res/2; as each has been calculated twice 
        6. return result
        3. End
    */
    