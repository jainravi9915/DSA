Problem Link -> https://practice.geeksforgeeks.org/problems/coin-change2448/1


long long int solve(int index, int sum, int coins[], int n, vector<vector<long long int>>&dp){
        if(sum==0)return 1;
        if(sum<0 || index>=n)return 0;
        if(dp[index][sum]!=-1)return dp[index][sum];
        long long int take=solve(index,sum-coins[index],coins,n,dp);
        long long int not_take=solve(index+1,sum,coins,n,dp);
        return dp[index][sum]= take+not_take;
    }
    long long int count(int coins[], int N, int sum) {
        vector<vector<long long int>>dp(N+1,vector<long long int>(sum+1,-1));
        sort(coins,coins+N);
        return solve(0,sum,coins,N,dp);
    }
    // Time Complexity -> O(sum*N)
    // Space Complexity -> O(sum*N)
    // Explanation -> explore all posibilities
    // 1. Start
    // 2. if sum==0 return 1;
    // 3.  if sum < 0 || index>=n) return 0;
    // 4. we can either consider it or not
    //   if we take it we can agagin take it :
    //         take= solve(index, sum-coins[index])
    // 5. if we not take it we can move ahead
    //      not_take=solve(index+1,sum )
    // 6. return take+ not_take
    // 7. STOP


// Top Down Approach 

    
    // vector<vector<long long int>>dp(N+1,vector<long long int>(sum+1,-0));
    //     for(int i=0; i<=sum; i++)dp[0][i]=0;
    //     for(int i=0; i<=N; i++)dp[i][0]=1;
    //     dp[0][0]=1;
    //     for(int i=1; i<=N; i++){
    //         for(int j=1; j<=sum; j++){
    //             long long int take=0,not_take=0;
    //             if(j-coins[i-1]>=0)
    //                 take=dp[i][j-coins[i-1]];
    //             not_take=dp[i-1][j];
                
    //             dp[i][j]=take+not_take;
    //         }
    //     }
    //     return dp[N][sum];
        